// ===== server.js =====
const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// ===== MongoDB Connection =====
mongoose
  .connect("mongodb://localhost:27017/bankDB", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("✅ MongoDB Connected"))
  .catch((err) => console.log("❌ DB Connection Error:", err));

// ===== Account Schema =====
const accountSchema = new mongoose.Schema({
  name: String,
  balance: Number,
});

const Account = mongoose.model("Account", accountSchema);

// ===== Create Sample Accounts (Run once) =====
// Uncomment the below code once to insert test data, then comment it again.
/*
(async () => {
  await Account.deleteMany({});
  await Account.insertMany([
    { name: "Alice", balance: 1000 },
    { name: "Bob", balance: 500 },
  ]);
  console.log("✅ Sample accounts created!");
})();
*/

// ===== Transfer Endpoint =====
app.post("/transfer", async (req, res) => {
  const { from, to, amount } = req.body;

  if (!from || !to || !amount || amount <= 0)
    return res.status(400).json({ error: "Invalid transfer details" });

  try {
    const sender = await Account.findOne({ name: from });
    const receiver = await Account.findOne({ name: to });

    if (!sender) return res.status(404).json({ error: "Sender account not found" });
    if (!receiver) return res.status(404).json({ error: "Receiver account not found" });

    if (sender.balance < amount)
      return res.status(400).json({ error: "Insufficient funds" });

    // Sequential update (no DB transaction)
    sender.balance -= amount;
    await sender.save();

    receiver.balance += amount;
    await receiver.save();

    res.json({
      message: `✅ Transfer successful! ${amount} transferred from ${from} to ${to}.`,
      senderBalance: sender.balance,
      receiverBalance: receiver.balance,
    });
  } catch (err) {
    console.error("❌ Error:", err);
    res.status(500).json({ error: "Internal server error" });
  }
});

app.listen(5000, () => console.log("🚀 Server running on http://localhost:5000"));
