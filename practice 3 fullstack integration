// ===== Backend (server.js) =====
const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const path = require("path");

const app = express();
const server = http.createServer(app);
const io = new Server(server);

// Serve frontend (for simplicity, React will be served from /client folder)
app.use(express.static(path.join(__dirname, "client", "build")));

io.on("connection", (socket) => {
  console.log("A user connected");

  socket.on("join", (username) => {
    socket.username = username;
    io.emit("message", { user: "System", text: `${username} joined the chat` });
  });

  socket.on("sendMessage", (msg) => {
    io.emit("message", { user: socket.username, text: msg });
  });

  socket.on("disconnect", () => {
    if (socket.username) {
      io.emit("message", { user: "System", text: `${socket.username} left the chat` });
    }
    console.log("A user disconnected");
  });
});

server.listen(5000, () => console.log("Server running on http://localhost:5000"));


// ===== Frontend (React App - client/src/App.js) =====
import React, { useState, useEffect } from "react";
import io from "socket.io-client";

const socket = io("http://localhost:5000");

function App() {
  const [username, setUsername] = useState("");
  const [isJoined, setIsJoined] = useState(false);
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([]);

  useEffect(() => {
    socket.on("message", (msg) => {
      setMessages((prev) => [...prev, msg]);
    });
  }, []);

  const joinChat = () => {
    if (username.trim() !== "") {
      socket.emit("join", username);
      setIsJoined(true);
    } else {
      alert("Please enter your name!");
    }
  };

  const sendMessage = () => {
    if (message.trim() !== "") {
      socket.emit("sendMessage", message);
      setMessage("");
    }
  };

  return (
    <div style={{ padding: "20px", textAlign: "center" }}>
      {!isJoined ? (
        <div>
          <h2>Join the Chat</h2>
          <input
            placeholder="Enter your name"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
          <button onClick={joinChat}>Join</button>
        </div>
      ) : (
        <div>
          <h2>Welcome, {username}!</h2>
          <div
            style={{
              border: "1px solid gray",
              padding: "10px",
              height: "300px",
              overflowY: "auto",
              marginBottom: "10px",
            }}
          >
            {messages.map((msg, i) => (
              <p key={i}>
                <strong>{msg.user}: </strong>
                {msg.text}
              </p>
            ))}
          </div>
          <input
            placeholder="Type message..."
            value={message}
            onChange={(e) => setMessage(e.target.value)}
          />
          <button onClick={sendMessage}>Send</button>
        </div>
      )}
    </div>
  );
}

export default App;
